用户模块
    通过用户行为来区分     actionName
	    登录            actionName="login"
        进入个人中心      actionName="userCenter"
        加载头像         actionName="userHead"
        验证昵称的唯一性   actionName="checkNick"
        修改用户信息      actionName="updateUser"
        用户退出         actionName="logout"

    在UserServlet的service方法中，获取用户行为
        String actionName = request.getParameter("actionName");
    调用对应方法
        if("login".equals(actionName)){

        }

一、用户登录
前端
1、添加表单，设置表单属性
action="user" method="post" id="loginForm"
2、设置表单属性的name属性值，id
    设置文本框和密码框，name和id
    设置复选框name和value（若复选框未选中，获取不到value属性值）
    设置隐藏域，传递用户行为  name=“actionName” value=“login”
3、在config.js文件中添加按钮点击时间绑定的函数  checkLogin()
    表单校验
        1、获取表单元素的值(姓名、密码)
        2、判断元素的值是否为空(引入util.js)
            如果为空，设置提示信息，通过设置span标签
            不为空则提交表单
后端
1、获取参数（姓名、密码）
2、参数的非空校验 (ResultInfo的封装类，用来封装响应结果 状态码 提示信息 返回的对象)
    如果为空
        设置ResultInfo的状态码和提示信息
        将ResultInfo对象放到request作用域中
        请求转发跳转到登录页面
        return
3、如果不为空，通过用户名查询用户对象
4、判断用户对象是否为空
    如果为空
        设置ResultInfo的状态码和提示信息
        将ResultInfo对象放到request作用域中
        请求转发跳转到登录页面
        return
5、用户对象不为空，将数据库中查询到的用户密码与前台传递的密码作比较（将密码加密再比较）
    如果密码不正确
        设置ResultInfo的状态码和提示信息
        将ResultInfo对象放到request作用域中
        请求转发跳转到登录页面
        return
6、如果密码正确
    将用户信息存到session作用域中
    判断用户是否选择记住密码(rem==1)
        如果是，将用户姓名密码存到cookie中，设置失效时间，并响应给客户端
        如果否，清空原有cookie对象
    重定向跳转至index页面

分层思想：
    Web层： 控制层、接收参数、响应结果
        1、获取参数
        2、调用service层函数，返回ResultInfo对象
        3、判断登录是否成功
            如果失败
                将ResultInfo对象设置到request作用域中
                请求转发到登录页面
            如果成功
                将用户信息存到session中
                判断用户是否选择记住密码(rem==1)
                    如果是，将用户姓名密码存到cookie中，设置失效时间，并响应给客户端
                    如果否，清空原有cookie对象
                重定向跳转至index页面

    Service层：业务逻辑层、参数判断、业务逻辑处理
        1、判断参数是否为空
            如果为空
                设置ResultInfo的状态码和提示信息
                返回ResultInfo对象
        2、如果不为空，通过用户名查询用户对象
        3、判断用户对象是否为空
            如果为空
                设置ResultInfo的状态码和提示信息
                返回ResultInfo对象
        4、用户对象不为空，将数据库中查询到的用户密码与前台传递的密码作比较（将密码加密再比较）
                如果密码不正确
                    设置ResultInfo的状态码和提示信息
                    返回ResultInfo对象
        5、如果密码正确
                设置ResultInfo的状态码和提示信息
        6、返回ResultInfo对象

    Dao层：数据访问层、数据增删改查
        通过用户名查询用户对象，返回用户对象
            1、获取数据库连接
            2、定义sql语句
            3、预编译
            4、设置参数
            5、执行查询，返回结果集
            6、判断并分析结果集
            7、关闭资源

二、自动登录，非法访问拦截
非法访问拦截
   拦截所有资源
   需要被放行的资源
       1、指定页面（不需登录即可访问的，例如登录页面、注册页面
       2、静态资源（存放在statics中的资源
       3、指定行为（用户无需登录即可执行的操作
       4、登录状态（判断session作用域中是否存在user对象，存在则放行，不存在则拦截跳转至登录页面

   免登录
       通过cookie实现
       什么时候免登录：
           当用户处于未登录状态，且去请求需要登录才能访问的资源，调用自动登录
       目的：
           自动调用登录方法
       实现：
           从cookie对象中获取用户的姓名和密码，自动执行登录
               1、获取Cookie数组 request.getCookies()
               2、判断Cookie数组
               3、遍历Cookie数组，获取指定Cookie对象（name为"user"的对象）
               4、得到对应的Cookie对象的value（用户名和密码 userName-userPwd)
               5、通过split分割value，分别得到对应的姓名与密码
               6、请求转发到登录操作
               7、return
   如果以上判断皆不满足，则拦截跳转到登录界面

三、用户退出
    前端：
        设置超链接的请求地址  user?actionName=logout
    后台：
        1、销毁session对象
        2、删除cookie对象
        3、重定向跳转到登录页面
四、进入个人中心
    前台
        设置超链接地址 user?actionName=userCenter
        通过el表达式获取session作用域中的用户信息
    后台
        1、设置首页动态包含的页面值
        2、请求转发跳转到index.jsp
五、加载头像
    前台：
        设置img标签的src属性，请求后台加载头像
            src="user?actionName=userHead&imageName=图片名称" （通过el表达式从session中获取）
    后台：
        1、获取参数（图片名称
        2、得到图片的存放路径（request.getServletContext().getRealPath("/")
        3、通过图片的完整路径，得到file对象
        4、通过截取，得到图片后缀
        5、通过不同后缀，设置不同的响应类型
        6、利用FileUtils的copyFile()方法，将图片拷贝给浏览器
六、验证昵称的唯一性
    前台：
        昵称文本框的失焦事件 blur
            1、获取昵称文本框的值
            2、判断值是否为空
                如果为空，提示用户，禁用按钮，并return
            3、判断昵称是否修改
                从session作用域中获取用户昵称（如果在js中想要使用el表达式获取请求对象，js需要写在jsp页面中，无法写在js文件中）
                如果获取到的用户昵称与session作用域中的一致，return
            4、如果昵称做了修改
                发送ajax请求后台，验证昵称是否可用
                    如果不可用，提示用户，禁用按钮
                    如果可用，清空提示信息，按钮可用
        昵称文本框的聚焦事件 focus
            1、清空提示信息
            2、按钮可用
    后台：
        Web层：
            1、获取参数
            2、从session作用域获取用户对象，得到用户ID
            3、调用service层方法，得到返回结果
            4、通过字符输出流，将结果响应给前台的ajax的回调函数
            5、关闭资源
        Service层：
            1、判断参数是否为空
                如果为空，返回”0“
            2、调用DAO层，通过用户ID和昵称查询用户对象
            3、判断用户对象存在
                存在，返回”0“
                不存在，返回”1“
        Dao层：
            1、定义SQL语句
                通过用户ID查询除了当前登录用户之外是否有其他用户占用了该昵称
                    指定昵称  nick（前台传递
                    当前用户 userid（session中
                    String sql = "select * from tb_user where nick = ? and userid != ?"
            2、设置参数集合
            3、调用BaseDao的查询方法
七、修改用户信息
    前台：
        文件上传表单
            1、表单
                表单类型 enctype="multipart/form-data"
                提交方式 method=“POST”
            2、表单元素
                设置name属性值（昵称、心情、头像
                设置隐藏域存放用户行为 actionName
    后台：
        Web层：
            注：文件上传，必须在servlet类上提供注解 @MultiPartConfig
            1、调用service层方法，传递request对象，返回resultInfo对象
            2、将resultInfo对象存到request作用域中
            3、请求转发跳转个人中心页面 user?actionName=userCenter
        Service层：
            1、获取参数 （昵称、心情
            2、参数的非空校验 （判断必填参数非空
                如果昵称为空，将状态码和错误信息设置到resultInfo对象中，并return
            3、从session作用域中获取用户对象 （获取用户对象的默认头像
            4、实现上传文件
                1、获取Part对象 request.getPart("name")  name代表的是file文件域的name属性值
                2、通过Part对象获取上传文件的文件名
                3、判断文件名是否为空
                4、获取文件存放路径 WEB-INF/upload
                5、上传文件到指定目录
            5、更新用户头像 （将原本用户对象中的默认头像设置为上传的文件名
            6、调用Dao层的更新方法，返回受影响的行数
            7、判断受影响的行数
                大于0，则修改成功，否则修改失败
            8、返回resultInfo对象

        Dao层
            通过userid修改用户信息
            1、定义sql语句
                String sql = "update tb_user set nick = ?, mood = ?, head = ? where userid = ?";
            2、设置参数集合
            3、调用BaseDao更新方法，返回受影响的行数
